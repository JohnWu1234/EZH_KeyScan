<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [debug\keyscan_gpio_lpc541u68.out]</title></head>
<body><HR>
<H1>Static Call Graph for image debug\keyscan_gpio_lpc541u68.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Mar 29 16:29:07 2019
<BR><P>
<H3>Maximum Stack Usage =        644 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[3f]">ADC0_SEQA_DriverIRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">ADC0_SEQA_DriverIRQHandler</a><BR>
 <LI><a href="#[80]">USART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">__aeabi_assert</a><BR>
 <LI><a href="#[7f]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">__aeabi_assert</a><BR>
 <LI><a href="#[87]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">__aeabi_assert</a><BR>
 <LI><a href="#[88]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">__aeabi_assert</a><BR>
 <LI><a href="#[71]">DbgConsole_SendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">__aeabi_assert</a><BR>
 <LI><a href="#[66]">CLOCK_GetFlexCommClkFreq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">CLOCK_GetFreq</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">ADC0_SEQA_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[1c]">ADC0_SEQA_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[40]">ADC0_SEQB_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[1d]">ADC0_SEQB_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[41]">ADC0_THCMP_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[1e]">ADC0_THCMP_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[33]">CTIMER0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[10]">CTIMER0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[34]">CTIMER1_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[11]">CTIMER1_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[36]">CTIMER3_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[13]">CTIMER3_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[2a]">DMA0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[7]">DMA0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[49]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(i.DbgConsole_PrintCallback) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[37]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[14]">FLEXCOMM0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[38]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[15]">FLEXCOMM1_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[39]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[16]">FLEXCOMM2_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[3a]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[17]">FLEXCOMM3_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[3b]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[18]">FLEXCOMM4_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[3c]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[19]">FLEXCOMM5_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[3d]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[1a]">FLEXCOMM6_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[3e]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[1b]">FLEXCOMM7_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[2b]">GINT0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[8]">GINT0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[2c]">GINT1_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[9]">GINT1_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[32]">MRT0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[f]">MRT0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[2d]">PIN_INT0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[a]">PIN_INT0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[2e]">PIN_INT1_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[b]">PIN_INT1_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[2f]">PIN_INT2_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[c]">PIN_INT2_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[30]">PIN_INT3_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[d]">PIN_INT3_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[46]">RTC_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[23]">RTC_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[42]">Reserved41_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[1f]">Reserved41_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[43]">Reserved42_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[20]">Reserved42_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[47]">Reserved46_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[24]">Reserved46_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[48]">Reserved47_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[25]">Reserved47_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[35]">SCT0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[12]">SCT0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_lpc51u68.o(i.SystemInit) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[45]">USB0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[22]">USB0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[44]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[21]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[31]">UTICK0_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[e]">UTICK0_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[29]">WDT_BOD_DriverIRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[6]">WDT_BOD_IRQHandler</a> from startup_lpc51u68.o(.text) referenced from startup_lpc51u68.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc51u68.o(.text)
 <LI><a href="#[26]">main</a> from gpio_led_output.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_SEQA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0_SEQB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC0_THCMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Reserved41_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Reserved47_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC0_SEQA_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_SEQA_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_SEQA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>ADC0_SEQB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>ADC0_THCMP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>Reserved41_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>Reserved42_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>Reserved46_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>Reserved47_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc51u68.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWdtOscFreq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSystemPLL
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>BOARD_InitPins</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BOARD_InitPins &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>CLOCK_AttachClk</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>CLOCK_GetAsyncApbClkFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAsyncApbClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLOCK_GetAsyncApbClkFreq &rArr; CLOCK_GetCoreSysClkFreq &rArr; CLOCK_GetWdtOscFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[5e]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLOCK_GetCoreSysClkFreq &rArr; CLOCK_GetWdtOscFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAsyncApbClkFreq
</UL>

<P><STRONG><a name="[60]"></a>CLOCK_GetExtClkFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetExtClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[65]"></a>CLOCK_GetFRGInputClock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFRGInputClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLOCK_GetFRGInputClock &rArr; CLOCK_GetCoreSysClkFreq &rArr; CLOCK_GetWdtOscFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[66]"></a>CLOCK_GetFlexCommClkFreq</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFlexCommClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = CLOCK_GetFlexCommClkFreq &rArr;  CLOCK_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[58]"></a>CLOCK_GetFreq</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_GetFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAsyncApbClkFreq
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
</UL>

<P><STRONG><a name="[5f]"></a>CLOCK_GetFro12MFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetFro12MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[62]"></a>CLOCK_GetFroHfFreq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetFroHfFreq))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[67]"></a>CLOCK_GetI2SMClkFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetI2SMClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
</UL>

<P><STRONG><a name="[64]"></a>CLOCK_GetOsc32KFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOsc32KFreq))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[63]"></a>CLOCK_GetPllOutFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetPllOutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[61]"></a>CLOCK_GetWdtOscFreq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetWdtOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLOCK_GetWdtOscFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[6a]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetFLASHAccessCyclesForFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSystemPLL
</UL>

<P><STRONG><a name="[59]"></a>DbgConsole_Init</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[72]"></a>DbgConsole_Printf</STRONG> (Thumb, 62 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>DbgConsole_SendData</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_debug_console.o(i.DbgConsole_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = DbgConsole_SendData &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[37]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[76]"></a>FLEXCOMM_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fsl_flexcomm.o(i.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[97]"></a>GPIO_PinInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>GPIO_PortInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = GPIO_PortInit &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>HAL_UartInit</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, usart_adapter.o(i.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usart_adapter.o(i.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[81]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, fsl_power_lib.o(i.POWER_SetVoltageForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_SetVoltageForFreq &rArr; POWER_setVdLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_setVdLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fsl_reset.o(i.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[57]"></a>RESET_PeripheralReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_reset.o(i.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[84]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fsl_reset.o(i.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[6e]"></a>SerialManager_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[70]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[6f]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[74]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial_manager.o(i.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
</UL>

<P><STRONG><a name="[85]"></a>Serial_UartInit</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, serial_port_uart.o(i.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[87]"></a>Serial_UartWrite</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial_port_uart.o(i.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[89]"></a>SetupSystemPLL</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, gpio_led_output.o(i.SetupSystemPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetupSystemPLL &rArr; SystemCoreClockUpdate &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllEncodeP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllEncodeN
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllEncodeM
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>StrFormatPrintf</STRONG> (Thumb, 562 bytes, Stack size 120 bytes, fsl_str.o(i.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[8d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, system_lpc51u68.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPreDiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPostDiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllMMult
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWdtOscFreq
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSystemPLL
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_lpc51u68.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc51u68.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = USART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[7d]"></a>USART_Init</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[92]"></a>USART_SetBaudRate</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, fsl_usart.o(i.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[80]"></a>USART_WriteBlocking</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = USART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[69]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, system_lpc51u68.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[68]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 710 bytes, Stack size 16 bytes, gpio_led_output.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSystemPLL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5c]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, pin_mux.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[86]"></a>SerialManager_StartWriting</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[88]"></a>SerialManager_Write</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, serial_manager.o(i.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[7e]"></a>HAL_UartGetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart_adapter.o(i.HAL_UartGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[7a]"></a>GetWdtOscFreq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, system_lpc51u68.o(i.GetWdtOscFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetWdtOscFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[91]"></a>findPllMMult</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system_lpc51u68.o(i.findPllMMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = findPllMMult &rArr; pllDecodeM
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllDecodeM
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[90]"></a>findPllPostDiv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, system_lpc51u68.o(i.findPllPostDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = findPllPostDiv &rArr; pllDecodeP
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllDecodeP
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[8f]"></a>findPllPreDiv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, system_lpc51u68.o(i.findPllPreDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = findPllPreDiv &rArr; pllDecodeN
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pllDecodeN
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[93]"></a>pllDecodeM</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, system_lpc51u68.o(i.pllDecodeM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pllDecodeM
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllMMult
</UL>

<P><STRONG><a name="[95]"></a>pllDecodeN</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, system_lpc51u68.o(i.pllDecodeN))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pllDecodeN
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPreDiv
</UL>

<P><STRONG><a name="[94]"></a>pllDecodeP</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, system_lpc51u68.o(i.pllDecodeP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pllDecodeP
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPllPostDiv
</UL>

<P><STRONG><a name="[6b]"></a>CLOCK_SetFLASHAccessCycles</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetFLASHAccessCycles))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
</UL>

<P><STRONG><a name="[78]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[77]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCOMM_SetPeriph &rArr; FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[96]"></a>CLOCK_EnableClock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio_led_output.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>GPIO_PinRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_led_output.o(i.GPIO_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>GPIO_PinWrite</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio_led_output.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>pllEncodeM</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio_led_output.o(i.pllEncodeM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pllEncodeM
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSystemPLL
</UL>

<P><STRONG><a name="[8b]"></a>pllEncodeN</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gpio_led_output.o(i.pllEncodeN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pllEncodeN
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSystemPLL
</UL>

<P><STRONG><a name="[8c]"></a>pllEncodeP</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_led_output.o(i.pllEncodeP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pllEncodeP
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSystemPLL
</UL>

<P><STRONG><a name="[49]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, fsl_debug_console.o(i.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendData &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[6c]"></a>ConvertRadixNumToString</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, fsl_str.o(i.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[82]"></a>POWER_setVdLevel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_power_lib.o(i.POWER_setVdLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_setVdLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
